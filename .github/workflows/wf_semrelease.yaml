on:
  push:
    branches:
      - "main"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        token: ${{secrets.PAT_TOKEN}}

    - name: Setup Git
      run: |
        git config --global user.name ${{vars.username}}
        git config --global user.email ${{vars.email}}

    - name: Get latest tag
      run: |
        git fetch --tags 
        LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "v0.0.0")
        echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
        echo "test" 
        echo $LATEST_TAG

    - name: Get last commit message
      run: |
        COMMIT_MSG=$(git log -1 --pretty=%B)
        echo "COMMIT_MSG=$COMMIT_MSG" >> $GITHUB_ENV
        echo "test"
        echo $COMMIT_MSG
      
    - name: Analyze commit message
      run: |
        if [[ "$COMMIT_MSG" == "fix"* ]]; then
          CHANGE_TYPE="patch"
          echo "CHANGE_TYPE=$CHANGE_TYPE" >> $GITHUB_ENV
        elif [[ "$COMMIT_MSG" == "feat"* ]]; then
          CHANGE_TYPE="minor"
          echo "CHANGE_TYPE=$CHANGE_TYPE" >> $GITHUB_ENV
        elif [[ "$COMMIT_MSG" == "breakingChange"* ]]; then
          CHANGE_TYPE="major"
          echo "CHANGE_TYPE=$CHANGE_TYPE" >> $GITHUB_ENV
        fi
        echo $CHANGE_TYPE

    - name: Determine new version 
      run: |
        VERSION_CLEANED=${LATEST_TAG:1}
        MAJOR=$(echo "$VERSION_CLEANED" | cut -d '.' -f 1)
        MINOR=$(echo "$VERSION_CLEANED" | cut -d '.' -f 2)
        PATCH=$(echo "$VERSION_CLEANED" | cut -d '.' -f 3)

        if [ "$CHANGE_TYPE" == "major" ]; then
          MAJOR=$((MAJOR + 1))
          MINOR=0
          PATCH=0
        elif [ "$CHANGE_TYPE" == "minor" ]; then
          MINOR=$((MINOR + 1))
          PATCH=0
        elif [ "$CHANGE_TYPE" == "patch" ]; then
          PATCH=$((PATCH + 1))
        fi

        NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        echo $NEW_VERSION
        echo $VERSION_CLEANED
    
    - name: Create new tag
      if: env.NEW_VERSION != ''
      run: |
        git tag $NEW_VERSION
        git push origin $NEW_VERSION

    - name: Show new version # -z check if empty. To reach this step it already need to be empty, can't we just echo "it work"?
      run: |
        if [ -z "$NEW_VERSION" ]; then
          echo "Ce commit n’a pas conduit à un tag."
        else
          echo "Nouvelle version créée : $NEW_VERSION"
        fi
      
      
    #  if: ${{ contains(git log --format=%B -n 1, 'fix') }}
    #  run: echo yes

    #- name: Analyze commit message feat
    #  if: $GITHUB_ENV == "feat"

    #- name: Analyze commit message breakingChange
    #  if: $GITHUB_ENV == "breakingChange"

    #- name: Determine new version

    #- name: Create new tag

    #- name: Show new version